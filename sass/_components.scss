///////////////////////////////////////////////////////////////////
// LOGO
.logo {
  height: 3.25rem;
  margin-left: 2rem;
}

///////////////////////////////////////////////////////////////////
// SEARCH

.search {
  //'.search' is able to do this because it's parent 'header' is a container that has it's own flex
  //flex grow, flex shrink, flex basis( initial main size of a flex item )
  flex: 0 0 40%;

  //display flex here because '.search' needs to have it's own flex container as well like the .header
  display: flex;
  //Basically align-items is the same as justify-content but in opposite directions
  align-items: center;
  justify-content: center;

  @media only screen and (max-width: $bp-smallest) {
    //In layout.scss file the '.header' also plays a role with the order:1 here
    // All the elements have an order of 0, if you set any to 1 it makes that element move to the end
    order: 1;
    //flex grow, flex shrink, flex basis( initial main size of a flex item )
    //100% to take up the entire space
    flex: 0 0 100%;
    background-color: var(--color-grey-light-2);
  }

  &__input {
    font-family: inherit;
    font-size: inherit;
    background-color: var(--color-grey-light-2);

    border: none;
    padding: 0.7rem 2rem;
    border-radius: 50px;
    margin-right: -3.25rem;
    width: 90%;

    transition: all 0.2s;

    &:focus {
      outline: none;
      width: 100%;
      background-color: var(--color-grey-light-3);
    }

    //changes the color of text upon user inputting text in placeholder
    &::-webkit-input-placeholder {
      font-weight: 100;
      color: var(--color-grey-light-4);
    }

    //changes the color of text upon user inputting text in placeholder
    &::-moz-placeholder {
      font-weight: 100;
      color: var(--color-grey-light-4);
    }
  }

  //upon focus, change the properties of button
  &__input:focus + &__button {
    background-color: var(--color-grey-light-3);
  }

  &__button {
    border: none;
    background-color: var(--color-grey-light-2);

    &:focus {
      outline: none;
    }

    &:active {
      transform: translateY(2px);
    }
  }

  &__icon {
    height: 2rem;
    width: 2rem;

    //To be able to change the color of the SVG!!
    fill: var(--color-grey-dark-3);
  }
}

///////////////////////////////////////////////////////////////////
// USER NAVIGATION
.user-nav {
  display: flex;
  //Basically align-items is the same as justify-content but in opposite directions
  align-items: center;

  //stretch the items in cross axis to fill entire space (this is basically overriding the 'align-items: center' of the parent element)
  align-self: stretch;

  //select all the direct children of .user-nav
  & > * {
    padding: 0 2rem;
    cursor: pointer;
    height: 100%;
    display: flex;
    align-items: center;
  }

  & > *:hover {
    background-color: var(--color-grey-light-2);
  }

  &__icon-box {
    position: relative;
  }

  &__icon {
    height: 2.25rem;
    width: 2.25rem;

    //To be able to change the color of the SVG!!
    fill: var(--color-grey-dark-2);
  }

  &__notification {
    font-size: 0.8rem;
    height: 1.75rem;
    width: 1.75rem;
    border-radius: 50%;
    background-color: var(--color-primary);
    color: #fff;
    position: absolute;
    top: 1.5rem;
    right: 1.1rem;

    //to center the text inside the red bubble
    display: flex;
    justify-content: center;
    //Basically align-items is the same as justify-content but in opposite directions
    align-items: center;
  }

  &__user-photo {
    height: 3.25rem;
    border-radius: 50%;
    margin-right: 1rem;
  }
}

///////////////////////////////////////////////////////////////////
// SIDE NAVIGATION

.side-nav {
  font-size: 1.4rem;
  list-style: none;
  margin-top: 3.5rem;

  @media only screen and (max-width: $bp-medium) {
    margin: 0;
    display: flex;
  }

  &__item {
    position: relative;

    // all the children, except the last one
    &:not(:last-child) {
      margin-bottom: 0.5rem;

      @media only screen and (max-width: $bp-medium) {
        margin: 0;
      }
    }

    @media only screen and (max-width: $bp-medium) {
      // give all the items the ability to grow as much as they can, but occupy the same amount since they share the same value
      //'flex: 1' means grow as much as it can and take up all the space
      flex: 1;
    }
  }

  &__item::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 3px;
    background-color: var(--color-primary);

    //makes it so that this element does not yet exist/show
    transform: scaleY(0);

    //takes .2s to finish
    transition: transform 0.2s,
      //takes .2s delay before starting, .4s to finish
      width 0.4s cubic-bezier(1, 0, 0, 1) 0.2s,
      background-color 0.1s;

    //Is the default that's why is scales at the center
    // transform-origin: center;
  }

  &__item:hover::before,
  &__item--active::before {
    //upon hover, scale to 100%;
    transform: scale(1);
    width: 100%;
  }

  &__item:active::before {
    background-color: var(--color-primary-light);
  }

  ///////////////////////

  &__link:link,
  &__link:visited {
    position: relative;
    //z-index only works if we have a specified position
    z-index: 10;
    text-decoration: none;
    text-transform: uppercase;
    color: var(--color-grey-light-1);
    display: block;
    padding: 1.5rem 3rem;

    display: flex;
    //Basically align-items is the same as justify-content but in opposite directions
    // To vertically align
    align-items: center;

    @media only screen and (max-width: $bp-medium) {
      justify-content: center;
      padding: 2rem;
    }

    @media only screen and (max-width: $bp-small) {
      flex-direction: column;
      padding: 1.5rem 0.5rem;
    }
  }

  &__icon {
    width: 1.7rem;
    height: 1.75rem;
    margin-right: 2rem;

    //basically use the same color as the parent element (or the link in this case)
    fill: currentColor;

    @media only screen and (max-width: $bp-small) {
      margin: 0;
      margin-bottom: 0.7rem;
      width: 1.5rem;
      height: 1.5rem;
    }
  }
}

///////////////////////////////////////////////////////////////////
// LEGAL TEXT

.legal {
  font-size: 1.2rem;
  color: var(--color-grey-light-4);
  text-align: center;
  padding: 2.5rem;

  @media only screen and (max-width: $bp-medium) {
    display: none;
  }
}

///////////////////////////////////////////////////////////////////
// GALLERY

.gallery {
  display: flex;

  &__photo {
    display: block;
    width: 100%;
  }
}

///////////////////////////////////////////////////////////////////
// HOTEL OVERVIEW

.overview {
  border-bottom: var(--line);
  display: flex;
  //Basically align-items is the same as justify-content but in opposite directions
  align-items: center;

  &__heading {
    font-size: 2.25rem;
    font-weight: 300;
    text-transform: uppercase;
    letter-spacing: 1px;
    padding: 1.5rem 3rem;

    @media only screen and (max-width: $bp-small) {
      font-size: 1.8rem;
      padding: 1.25rem 2rem;
    }
  }

  &__stars {
    //display flex here to make the stars vertically align with EXACT precision
    display: flex;
    //This is a nice trick to make the margin calculate on it's own (make it push all the way to the right)
    margin-right: auto;
  }

  &__icon-star,
  &__icon-location {
    width: 1.75rem;
    height: 1.75rem;

    //To be able to change the color of the SVG!!
    fill: var(--color-primary);
  }

  &__location {
    font-size: 1.2rem;
    display: flex;
    align-items: center;
  }

  &__icon-location {
    margin-right: 0.5rem;
  }

  &__rating {
    background-color: var(--color-primary);
    margin-left: 3rem;
    color: #fff;
    padding: 0 2.25rem;
    //stretch the items in cross axis to fill entire space (this is basically overriding the 'align-items: center' of the parent element)
    align-self: stretch;

    display: flex;
    //change default direction(horizontally) of 'flex' to align vertically
    flex-direction: column;
    align-items: center;
    justify-content: center;

    @media only screen and (max-width: $bp-small) {
      padding: 0 1.5rem;
    }
  }

  &__rating-average {
    font-size: 2.25rem;
    font-weight: 300;
    margin-bottom: -3px;

    @media only screen and (max-width: $bp-small) {
      font-size: 1.8rem;
    }
  }

  &__rating-count {
    font-size: 0.8rem;
    text-transform: uppercase;
    @media only screen and (max-width: $bp-small) {
      font-size: 0.5rem;
    }
  }
}

///////////////////////////////////////////////////////////////////
// BUTTON INLINE

.btn-inline {
  border: none;
  color: var(--color-primary);
  font-size: inherit;
  //currentColor here means to use the same color used for the text color(even if the text color changes upon hover)
  border-bottom: 1px solid currentColor;
  display: inline-block;
  background-color: transparent;
  cursor: pointer;

  transition: all 0.2s;

  & span {
    margin-left: 3px;
    transition: margin-left 0.2s;
  }

  &:hover {
    color: var(--color-grey-dark-1);

    span {
      margin-left: 8px;
    }
  }

  &:focus {
    outline: none;
    animation: pulsate 1s infinite;
  }
}

@keyframes pulsate {
  0% {
    transform: scale(1);
    box-shadow: none;
  }

  50% {
    transform: scale(1.05);
    box-shadow: 0 1rem 4rem rgba(0, 0, 0, 0.25);
  }

  100% {
    transform: scale(1);
    box-shadow: none;
  }
}
///////////////////////////////////////////////////////////////////
// PARAGRAPH

// All but the last child of the type: paragraph
.paragraph:not(:last-of-type) {
  margin-bottom: 2rem;
}

///////////////////////////////////////////////////////////////////
// LIST

.list {
  list-style: none;
  margin: 3rem 0;
  padding: 3rem 0;
  border-top: var(--line);
  border-bottom: var(--line);

  display: flex;
  flex-wrap: wrap;

  &__item {
    //flex grow, flex shrink, flex basis( initial main size of a flex item )
    //50% because we want 2 items side by side
    flex: 0 0 50%;
    margin-bottom: 0.7rem;
  }

  &__item::before {
    content: '';
    display: inline-block;
    height: 1rem;
    width: 1rem;
    margin-right: 7px;

    //Older Browsers
    // background-image: url(../img/chevron-thin-right.svg);
    // background-size: cover;

    //Newer browsers - masks
    //usually to change the background image color (when working with icons) you would have to work with SVG's instead, but here is a shortcut
    //this allows you to changes the color of the image(icon). Kind of like clipping
    background-color: var(--color-primary);
    -webkit-mask-image: url(../img/chevron-thin-right.svg);
    //makes sure the entire icon/element is shown (like background-size: cover)
    -webkit-mask-size: cover;

    //just for the future when browsers start implementing this
    mask-image: url(../img/chevron-thin-right.svg);
    mask-size: cover;
  }
}

///////////////////////////////////////////////////////////////////
// RECOMMEND

.recommend {
  font-size: 1.3rem;
  color: var(--color-grey-dark-3);

  display: flex;
  //Basically align-items is the same as justify-content but in opposite directions
  align-items: center;

  &__count {
    //This is a nice trick to make the margin calculate on it's own (make it push all the way to the right)
    margin-right: auto;
  }

  &__friends {
    display: flex;
  }

  &__photo {
    box-sizing: content-box;
    height: 4rem;
    width: 4rem;
    border-radius: 50%;
    border: 3px solid #fff;

    &:not(:last-child) {
      margin-right: -2rem;
    }
  }
}

///////////////////////////////////////////////////////////////////
// REVIEWS

.review {
  background-color: #fff;
  box-shadow: var(--shadow-light);
  padding: 3rem;
  margin-bottom: 3.5rem;
  overflow: hidden;

  position: relative;

  @media only screen and (max-width: $bp-medium) {
    margin-right: 4.5rem;
    margin-bottom: 3rem;
  }

  &__text {
    margin-bottom: 2rem;

    //always must set position if you are going to use z-index
    position: relative;
    z-index: 10;
  }

  &__user {
    display: flex;
    //Basically align-items is the same as justify-content but in opposite directions
    align-items: center;
  }

  &__photo {
    height: 4.5rem;
    width: 4.5rem;
    border-radius: 50%;

    margin-right: 1.5rem;
  }

  &__user-box {
    //This is a nice trick to make the margin calculate on it's own (make it push all the way to the right)
    margin-right: auto;
  }

  &__user-name {
    font-size: 1.1rem;
    font-weight: 600;
    text-transform: uppercase;
    margin-bottom: 0.4rem;
  }

  &__user-date {
    font-size: 1rem;
    color: var(--color-grey-dark-3);
  }

  &__rating {
    color: var(--color-primary);
    font-size: 2.2rem;
    font-weight: 300;
  }

  &::before {
    content: '\201C';
    position: absolute;
    top: -2rem;
    left: -1rem;
    line-height: 1;

    font-size: 20rem;
    color: var(--color-grey-light-2);
    font-family: sans-serif;

    //always must set position if you are going to use z-index
    z-index: 1;
  }
}

///////////////////////////////////////////////////////////////////
// CALL TO ACTION

.cta {
  padding: 3.5rem 0;
  text-align: center;

  @media only screen and (max-width: $bp-medium) {
    padding: 2.5rem 0;
  }

  &__book-now {
    font-size: 2rem;
    font-weight: 300;
    text-transform: uppercase;
    margin-bottom: 2.5rem;
  }
}

.btn {
  font-size: 1.5rem;
  font-weight: 300;
  text-transform: uppercase;
  border-radius: 100px;
  border: none;
  background-image: linear-gradient(
    to right,
    var(--color-primary-light),
    var(--color-primary-dark)
  );
  cursor: pointer;
  color: #fff;

  //makes it so the invisible text fades away when it's not hovered (because it's an overflow)
  overflow: hidden;
  position: relative;

  //all of the child elements of .btn (so in this case both __visible and __invisible)
  & > * {
    display: inline-block;
    height: 100%;
    width: 100%;
    transition: all 0.2s;
  }

  &__visible {
    padding: 2rem 7.5rem;
  }

  &__invisible {
    padding: 2rem 0;
    position: absolute;
    left: 0;
    //100% because if the element is 50px in height then it will move up 100% of 50px
    top: -100%;
  }

  &:hover {
    background-image: linear-gradient(
      to left,
      var(--color-primary-light),
      var(--color-primary-dark)
    );
  }

  &:hover &__visible {
    transform: translateY(100%);
  }
  &:hover &__invisible {
    top: 0;
  }

  &:focus {
    outline: none;
    animation: pulsate 1s infinite;
  }
}
